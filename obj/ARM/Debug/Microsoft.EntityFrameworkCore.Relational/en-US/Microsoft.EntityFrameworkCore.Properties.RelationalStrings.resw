<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DbFunctionInvalidInstanceType" xml:space="preserve">
    <value>The DbFunction '{function}' defined on type '{type}' must be either a static method or an instance method defined on a DbContext subclass. Instance methods on other types are not supported.</value>
  </data>
  <data name="NamedConnectionStringNotFound" xml:space="preserve">
    <value>A named connection string was used, but the name '{name}' was not found in the application's configuration. Note that named connection strings are only supported when using 'IConfiguration' and a service provider, such as in a typical ASP.NET Core application. See https://go.microsoft.com/fwlink/?linkid=850912 for more information.</value>
  </data>
  <data name="DbFunctionExpressionIsNotMethodCall" xml:space="preserve">
    <value>The provided DbFunction expression '{expression}' is invalid. The expression should be a lambda expression containing a single method call to the target static method. Default values can be provided as arguments if required. E.g. () =&gt; SomeClass.SomeMethod(null, 0)</value>
  </data>
  <data name="LogNoMigrationsFound" xml:space="preserve">
    <value>No migrations were found in assembly '{migrationsAssembly}'.</value>
  </data>
  <data name="UpdateConcurrencyException" xml:space="preserve">
    <value>Database operation expected to affect {expectedRows} row(s) but actually affected {actualRows} row(s). Data may have been modified or deleted since entities were loaded. See http://go.microsoft.com/fwlink/?LinkId=527962 for information on understanding and handling optimistic concurrency exceptions.</value>
  </data>
  <data name="NoProviderConfigured" xml:space="preserve">
    <value>No relational database providers are configured. Configure a database provider using OnConfiguring or by creating an ImmutableDbContextOptions with a database provider configured and passing it to the context.</value>
  </data>
  <data name="DbFunctionInvalidParameterType" xml:space="preserve">
    <value>The parameter '{parameter}' for the DbFunction '{function}' has an invalid type '{type}'. Ensure the parameter type can be mapped by the current provider.</value>
  </data>
  <data name="DbFunctionInvalidParameterName" xml:space="preserve">
    <value>The DbFunction '{function}' does not have a parameter named '{parameter}'.</value>
  </data>
  <data name="UnknownOperation" xml:space="preserve">
    <value>The current migration SQL generator '{sqlGeneratorType}' is unable to generate SQL for operations of type '{operationType}'.</value>
  </data>
  <data name="LogDisposingDataReader" xml:space="preserve">
    <value>A data reader was disposed.</value>
  </data>
  <data name="DuplicateColumnNameNullabilityMismatch" xml:space="preserve">
    <value>'{entityType1}.{property1}' and '{entityType2}.{property2}' are both mapped to column '{columnName}' in '{table}' but are configured with different nullability.</value>
  </data>
  <data name="MultipleProvidersConfigured" xml:space="preserve">
    <value>Multiple relational database provider configurations found. A context can only be configured to use a single database provider.</value>
  </data>
  <data name="InvalidMinBatchSize" xml:space="preserve">
    <value>The specified MinBatchSize value is not valid. It must be a positive number.</value>
  </data>
  <data name="LogConnectionError" xml:space="preserve">
    <value>An error occurred using the connection to database '{database}' on server '{server}'.</value>
  </data>
  <data name="TransactionAlreadyStarted" xml:space="preserve">
    <value>The connection is already in a transaction and cannot participate in another transaction.</value>
  </data>
  <data name="LogDisposingTransaction" xml:space="preserve">
    <value>Disposing transaction.</value>
  </data>
  <data name="ConflictingEnlistedTransaction" xml:space="preserve">
    <value>The connection is currently enlisted in a transaction. The enlisted transaction needs to be completed before starting a transaction.</value>
  </data>
  <data name="BadSequenceString" xml:space="preserve">
    <value>Unable to deserialize sequence from model metadata. See inner exception for details.</value>
  </data>
  <data name="FromSqlNonComposable" xml:space="preserve">
    <value>FromSqlRaw or FromSqlInterpolated was called with non-composable SQL and with a query composing over it. Consider calling `AsEnumerable` after the FromSqlRaw or FromSqlInterpolated method to perform the composition on the client side.</value>
  </data>
  <data name="ModificationCommandInvalidEntityState" xml:space="preserve">
    <value>Cannot save changes for an entity in state '{entityState}'.</value>
  </data>
  <data name="LogCommandCreated" xml:space="preserve">
    <value>Created DbCommand for '{executionType}' ({elapsed}ms).</value>
  </data>
  <data name="LogConnectionErrorAsDebug" xml:space="preserve">
    <value>An error occurred using the connection to database '{database}' on server '{server}'.</value>
  </data>
  <data name="DuplicateForeignKeyColumnMismatch" xml:space="preserve">
    <value>The foreign keys {index1} on '{entityType1}' and {index2} on '{entityType2}' are both mapped to '{table}.{foreignKeyName}' but use different columns ({columnNames1} and {columnNames2}).</value>
  </data>
  <data name="LogCommittingTransaction" xml:space="preserve">
    <value>Committing transaction.</value>
  </data>
  <data name="InvalidMaxBatchSize" xml:space="preserve">
    <value>The specified MaxBatchSize value is not valid. It must be a positive number.</value>
  </data>
  <data name="DuplicateColumnNameDefaultSqlMismatch" xml:space="preserve">
    <value>'{entityType1}.{property1}' and '{entityType2}.{property2}' are both mapped to column '{columnName}' in '{table}' but are configured to use different default values ('{value1}' and '{value2}').</value>
  </data>
  <data name="LogQueryPossibleExceptionWithAggregateOperatorWarning" xml:space="preserve">
    <value>Possible unintended use of a potentially throwing aggregate method (Min, Max, Average) in a subquery. Client evaluation will be used and operator will throw if no data exists. Changing the subquery result type to a nullable type will allow full translation.</value>
  </data>
  <data name="DuplicateColumnNameCommentMismatch" xml:space="preserve">
    <value>'{entityType1}.{property1}' and '{entityType2}.{property2}' are both mapped to column '{columnName}' in '{table}' but are configured to use different comments ('{comment1}' and '{comment2}').</value>
  </data>
  <data name="ConflictingOriginalRowValues" xml:space="preserve">
    <value>An instance of entity type '{firstEntityType}' and an instance of entity type '{secondEntityType}' are mapped to the same row, but have different original property values for the properties {firstProperties} and {secondProperties} mapped to {columns}. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see the conflicting values.</value>
  </data>
  <data name="CaseWhenClauseResultTypeUnexpected" xml:space="preserve">
    <value>The result type of '{whenResultType}' in a when clause is invalid. The expected type is '{resultType}'.</value>
  </data>
  <data name="LogRollingBackTransaction" xml:space="preserve">
    <value>Rolling back transaction.</value>
  </data>
  <data name="IncompatibleTableCommentMismatch" xml:space="preserve">
    <value>Cannot use table '{table}' for entity type '{entityType}' since it is being used for entity type '{otherEntityType}' and the comment '{comment}' does not match the comment '{otherComment}'.</value>
  </data>
  <data name="LogPossibleUnintendedUseOfEquals" xml:space="preserve">
    <value>Possible unintended use of method Equals(object) for arguments of different types in expression '{expression}'. This comparison will always return 'false'.</value>
  </data>
  <data name="LogBeganTransaction" xml:space="preserve">
    <value>Began transaction with isolation level '{isolationLevel}'.</value>
  </data>
  <data name="DbFunctionNameEmpty" xml:space="preserve">
    <value>The DbFunction '{function}' has no name set. Name is a required property of a DbFunction.</value>
  </data>
  <data name="LogBeginningTransaction" xml:space="preserve">
    <value>Beginning transaction with isolation level '{isolationLevel}'.</value>
  </data>
  <data name="LogRevertingMigration" xml:space="preserve">
    <value>Reverting migration '{migration}'.</value>
  </data>
  <data name="BadSequenceType" xml:space="preserve">
    <value>Invalid type for sequence. Valid types are 'Int64' (the default), 'Int32', 'Int16', 'Byte' and 'Decimal'.</value>
  </data>
  <data name="SqlFunctionArgumentsAndMappingsMismatch" xml:space="preserve">
    <value>The number of argument type mappings does not match the number of arguments.</value>
  </data>
  <data name="LogUsingTransaction" xml:space="preserve">
    <value>Using an existing transaction with isolation level '{isolationLevel}'.</value>
  </data>
  <data name="ConnectionAndConnectionString" xml:space="preserve">
    <value>Both an existing DbConnection and a connection string have been configured. When an existing DbConnection is used the connection string must be set on that connection.</value>
  </data>
  <data name="UnsupportedPropertyType" xml:space="preserve">
    <value>No mapping to a relational type can be found for property '{entity}.{property}' with the CLR type '{clrType}'.</value>
  </data>
  <data name="ConflictingRowUpdateTypesSensitive" xml:space="preserve">
    <value>The instance of entity type '{firstEntityType}' with the key value '{firstKeyValue}' is marked as '{firstState}', but the instance of entity type '{secondEntityType}' with the key value '{secondKeyValue}' is marked as '{secondState}' and both are mapped to the same row.</value>
  </data>
  <data name="ConflictingRowValues" xml:space="preserve">
    <value>An instance of entity type '{firstEntityType}' and an instance of entity type '{secondEntityType}' are mapped to the same row, but have different property values for the properties {firstProperties} and {secondProperties} mapped to {columns}. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see the conflicting values.</value>
  </data>
  <data name="InvalidCommandTimeout" xml:space="preserve">
    <value>The specified CommandTimeout value is not valid. It must be a positive number.</value>
  </data>
  <data name="SqlFunctionNullArgumentMapping" xml:space="preserve">
    <value>One of the specified argument type mappings was null.</value>
  </data>
  <data name="UpdateStoreException" xml:space="preserve">
    <value>An error occurred while updating the entries. See the inner exception for details.</value>
  </data>
  <data name="RelationalCloneNotImplemented" xml:space="preserve">
    <value>The '{mapping}' does not support 2.2 style type mapping. The database provider needs to be updated to support the full set of mapping customization.</value>
  </data>
  <data name="SharedRowEntryCountMismatchSensitive" xml:space="preserve">
    <value>The entity of type '{entityType}' is sharing the table '{tableName}' with entities of type '{missingEntityType}', but there is no entity of this type with the same key value '{keyValue}' that has been marked as '{state}'.</value>
  </data>
  <data name="MigrationNotFound" xml:space="preserve">
    <value>The migration '{migrationName}' was not found.</value>
  </data>
  <data name="DuplicateForeignKeyDeleteBehaviorMismatch" xml:space="preserve">
    <value>The foreign keys {index1} on '{entityType1}' and {index2} on '{entityType2}' are both mapped to '{table}.{foreignKeyName}' but with different delete behavior ('{deleteBehavior1}' and '{deleteBehavior2}').</value>
  </data>
  <data name="LogExplicitTransactionEnlisted" xml:space="preserve">
    <value>Enlisted in an explicit transaction with isolation level '{isolationLevel}'.</value>
  </data>
  <data name="DuplicateColumnNameDataTypeMismatch" xml:space="preserve">
    <value>'{entityType1}.{property1}' and '{entityType2}.{property2}' are both mapped to column '{columnName}' in '{table}' but are configured to use different data types ('{dataType1}' and '{dataType2}').</value>
  </data>
  <data name="CaseElseResultTypeUnexpected" xml:space="preserve">
    <value>The result type of '{elseResultType}' in the else clause is invalid. The expected type is '{resultType}'.</value>
  </data>
  <data name="LogClosingConnection" xml:space="preserve">
    <value>Closing connection to database '{database}' on server '{server}'.</value>
  </data>
  <data name="IncompatibleTableNoRelationship" xml:space="preserve">
    <value>Cannot use table '{table}' for entity type '{entityType}' since it is being used for entity type '{otherEntityType}' and there is no relationship between their primary keys.</value>
  </data>
  <data name="MissingConcurrencyColumn" xml:space="preserve">
    <value>Entity type '{entityType}' doesn't contain a property mapped to the store-generated concurrency token column '{missingColumn}' that is used by another entity type sharing the table '{table}'. Add a store-generated property mapped to the same column to '{entityType}'. It can be in shadow state.</value>
  </data>
  <data name="LogOpeningConnection" xml:space="preserve">
    <value>Opening connection to database '{database}' on server '{server}'.</value>
  </data>
  <data name="LogExecutedCommand" xml:space="preserve">
    <value>Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}</value>
  </data>
  <data name="DerivedTypeTable" xml:space="preserve">
    <value>The entity type '{entityType}' cannot be mapped to a table because it is derived from '{baseType}'. Only base entity types can be mapped to a table.</value>
  </data>
  <data name="ParameterNotObjectArray" xml:space="preserve">
    <value>Cannot use the value provided for parameter '{parameter}' because it isn't assignable to type object[].</value>
  </data>
  <data name="ConflictingAmbientTransaction" xml:space="preserve">
    <value>An ambient transaction has been detected. The ambient transaction needs to be completed before beginning a transaction on this connection.</value>
  </data>
  <data name="LogRolledBackTransaction" xml:space="preserve">
    <value>Rolled back transaction.</value>
  </data>
  <data name="TimeoutTooBig" xml:space="preserve">
    <value>Timeout must be less than or equal to Int32.MaxValue (2147483647) seconds.  Provided: {seconds} seconds.</value>
  </data>
  <data name="NoActiveTransaction" xml:space="preserve">
    <value>The connection does not have any active transactions.</value>
  </data>
  <data name="DuplicateCheckConstraint" xml:space="preserve">
    <value>The check constraint '{checkConstraint}' cannot be added to the entity type '{entityType}' because another check constraint with the same name already exists.</value>
  </data>
  <data name="ConflictingColumnServerGeneration" xml:space="preserve">
    <value>{conflictingConfiguration} cannot be set for '{property}' at the same time as {existingConfiguration}. Remove one of these values.</value>
  </data>
  <data name="LogTransactionError" xml:space="preserve">
    <value>An error occurred using a transaction.</value>
  </data>
  <data name="DuplicateColumnNameComputedSqlMismatch" xml:space="preserve">
    <value>'{entityType1}.{property1}' and '{entityType2}.{property2}' are both mapped to column '{columnName}' in '{table}' but are configured to use different computed values ('{value1}' and '{value2}').</value>
  </data>
  <data name="ConflictingOriginalRowValuesSensitive" xml:space="preserve">
    <value>The instance of entity type '{firstEntityType}' and the instance of entity type '{secondEntityType}' are mapped to the same row with the key value '{keyValue}', but have different original property values '{firstConflictingValues}' and '{secondConflictingValues}' mapped to {columns}.</value>
  </data>
  <data name="SharedRowEntryCountMismatch" xml:space="preserve">
    <value>The entity of type '{entityType}' is sharing the table '{tableName}' with entities of type '{missingEntityType}', but there is no entity of this type with the same key value that has been marked as '{state}'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see the key values.</value>
  </data>
  <data name="LogBatchReadyForExecution" xml:space="preserve">
    <value>Executing {batchCommandsCount} update commands as a batch.</value>
  </data>
  <data name="BadCheckConstraintString" xml:space="preserve">
    <value>Unable to deserialize check constraint from model metadata. See inner exception for details.</value>
  </data>
  <data name="LogBatchSmallerThanMinBatchSize" xml:space="preserve">
    <value>Executing update commands individually as the number of batchable commands ({batchableCommandsCount}) is smaller than the minimum batch size ({minBatchSize}).</value>
  </data>
  <data name="LogAmbientTransactionEnlisted" xml:space="preserve">
    <value>Enlisted in an ambient transaction with isolation level '{isolationLevel}'.</value>
  </data>
  <data name="DuplicateKeyColumnMismatch" xml:space="preserve">
    <value>The keys {key1} on '{entityType1}' and {key2} on '{entityType2}' are both mapped to '{table}.{keyName}' but with different columns ({columnNames1} and {columnNames2}).</value>
  </data>
  <data name="DuplicateForeignKeyUniquenessMismatch" xml:space="preserve">
    <value>The foreign keys {index1} on '{entityType1}' and {index2} on '{entityType2}' are both mapped to '{table}.{foreignKeyName}' but with different uniqueness.</value>
  </data>
  <data name="ExpectedNonNullParameter" xml:space="preserve">
    <value>Expected a non-null value for query parameter '{parameter}'.</value>
  </data>
  <data name="LogCommandFailed" xml:space="preserve">
    <value>Failed executing DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}</value>
  </data>
  <data name="DuplicateIndexUniquenessMismatch" xml:space="preserve">
    <value>The indexes {index1} on '{entityType1}' and {index2} on '{entityType2}' are both mapped to '{table}.{indexName}' but with different uniqueness.</value>
  </data>
  <data name="LogMigrationAttributeMissingWarning" xml:space="preserve">
    <value>A MigrationAttribute isn't specified on the '{class}' class.</value>
  </data>
  <data name="LogMigrating" xml:space="preserve">
    <value>Migrating using database '{database}' on server '{dataSource}'.</value>
  </data>
  <data name="TimeoutTooSmall" xml:space="preserve">
    <value>Timeout must be greater than or equal to zero.  Provided: {seconds} seconds.</value>
  </data>
  <data name="LogApplyingMigration" xml:space="preserve">
    <value>Applying migration '{migration}'.</value>
  </data>
  <data name="DuplicateIndexColumnMismatch" xml:space="preserve">
    <value>The indexes {index1} on '{entityType1}' and {index2} on '{entityType2}' are both mapped to '{table}.{indexName}' but with different columns ({columnNames1} and {columnNames2}).</value>
  </data>
  <data name="NoConnectionOrConnectionString" xml:space="preserve">
    <value>A relational store has been configured without specifying either the DbConnection or connection string to use.</value>
  </data>
  <data name="DbFunctionInvalidReturnType" xml:space="preserve">
    <value>The DbFunction '{function}' has an invalid return type '{type}'. Ensure that the return type can be mapped by the current provider.</value>
  </data>
  <data name="ConflictingRowUpdateTypes" xml:space="preserve">
    <value>An instance of entity type '{firstEntityType}' is marked as '{firstState}', but an instance of entity type '{secondEntityType}' is marked as '{secondState}' and both are mapped to the same row. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see the key values.</value>
  </data>
  <data name="LogAmbientTransaction" xml:space="preserve">
    <value>An ambient transaction has been detected. The current provider does not support ambient transactions. See http://go.microsoft.com/fwlink/?LinkId=800142</value>
  </data>
  <data name="IncompatibleTableKeyNameMismatch" xml:space="preserve">
    <value>Cannot use table '{table}' for entity type '{entityType}' since it is being used for entity type '{otherEntityType}' and the name '{keyName}' of the primary key {primaryKey} does not match the name '{otherName}' of the primary key {otherPrimaryKey}.</value>
  </data>
  <data name="LogNoMigrationsApplied" xml:space="preserve">
    <value>No migrations were applied. The database is already up to date.</value>
  </data>
  <data name="PendingAmbientTransaction" xml:space="preserve">
    <value>This connection was used with an ambient transaction. The original ambient transaction needs to be completed before this connection can be used outside of it.</value>
  </data>
  <data name="ConflictingRowValuesSensitive" xml:space="preserve">
    <value>The instance of entity type '{firstEntityType}' and the instance of entity type '{secondEntityType}' are mapped to the same row with the key value '{keyValue}', but have different property values '{firstConflictingValues}' and '{secondConflictingValues}' mapped to {columns}.</value>
  </data>
  <data name="RelationalNotInUse" xml:space="preserve">
    <value>Relational-specific methods can only be used when the context is using a relational database provider.</value>
  </data>
  <data name="LogOpenedConnection" xml:space="preserve">
    <value>Opened connection to database '{database}' on server '{server}'.</value>
  </data>
  <data name="LogCommandCreating" xml:space="preserve">
    <value>Creating DbCommand for '{executionType}'.</value>
  </data>
  <data name="CaseWhenClauseTestTypeUnexpected" xml:space="preserve">
    <value>The operand type of '{whenOperandType}' in a when clause is invalid. The expected type is '{expectedWhenOperandType}'.</value>
  </data>
  <data name="LogClosedConnection" xml:space="preserve">
    <value>Closed connection to database '{database}' on server '{server}'.</value>
  </data>
  <data name="LogBoolWithDefaultWarning" xml:space="preserve">
    <value>The 'bool' property '{property}' on entity type '{entityType}' is configured with a database-generated default. This default will always be used for inserts when the property has the value 'false', since this is the CLR default for the 'bool' type. Consider using the nullable 'bool?' type instead so that the default will only be used for inserts when the property value is 'null'.</value>
  </data>
  <data name="SetOperationNotWithinEntityTypeHierarchy" xml:space="preserve">
    <value>Set operations (Union, Concat, Intersect, Except) are only supported over entity types within the same type hierarchy.</value>
  </data>
  <data name="TransactionAssociatedWithDifferentConnection" xml:space="preserve">
    <value>The specified transaction is not associated with the current connection. Only transactions associated with the current connection may be used.</value>
  </data>
  <data name="UnsupportedType" xml:space="preserve">
    <value>No mapping to a relational type can be found for the CLR type '{clrType}'.</value>
  </data>
  <data name="LogExecutingCommand" xml:space="preserve">
    <value>Executing DbCommand [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}</value>
  </data>
  <data name="LogKeyHasDefaultValue" xml:space="preserve">
    <value>Property '{property}' on entity type '{entityType}' is part of a primary or alternate key but has a constant default value set. Constant default values are not useful for primary or alternate keys since these properties must always have non-null unique values.</value>
  </data>
  <data name="DuplicateForeignKeyPrincipalTableMismatch" xml:space="preserve">
    <value>The foreign keys {index1} on '{entityType1}' and {index2} on '{entityType2}' are both mapped to '{table}.{foreignKeyName}' but referencing different principal tables ('{principalTable1}' and '{principalTable2}').</value>
  </data>
  <data name="LogGeneratingUp" xml:space="preserve">
    <value>Generating up script for migration '{migration}'.</value>
  </data>
  <data name="IncorrectDefaultValueType" xml:space="preserve">
    <value>Cannot set default value '{value}' of type '{valueType}' on property '{property}' of type '{propertyType}' in entity type '{entityType}'.</value>
  </data>
  <data name="MissingParameterValue" xml:space="preserve">
    <value>No value provided for required parameter '{parameter}'.</value>
  </data>
  <data name="FromSqlMissingColumn" xml:space="preserve">
    <value>The required column '{column}' was not present in the results of a 'FromSql' operation.</value>
  </data>
  <data name="LogGeneratingDown" xml:space="preserve">
    <value>Generating down script for migration '{migration}'.</value>
  </data>
  <data name="DbFunctionGenericMethodNotSupported" xml:space="preserve">
    <value>The DbFunction '{function}' is generic. Generic methods are not supported.</value>
  </data>
  <data name="LogCommittedTransaction" xml:space="preserve">
    <value>Committing transaction.</value>
  </data>
  <data name="DuplicateForeignKeyPrincipalColumnMismatch" xml:space="preserve">
    <value>The foreign keys {index1} on '{entityType1}' and {index2} on '{entityType2}' are both mapped to '{table}.{foreignKeyName}' but referencing different principal columns ({principalColumnNames1} and {principalColumnNames2}).</value>
  </data>
  <data name="SqlFunctionUnexpectedInstanceMapping" xml:space="preserve">
    <value>An instance type mapping was specified without an instance expression.</value>
  </data>
</root>