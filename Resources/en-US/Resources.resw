<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddTaskModal.PrimaryButtonText" xml:space="preserve">
    <value>Create</value>
  </data>
  <data name="AddTaskModal.SecondaryButtonText" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="AddTaskModal.Title" xml:space="preserve">
    <value>Create target</value>
  </data>
  <data name="AmountBlockTitle.Text" xml:space="preserve">
    <value>Your funds:</value>
  </data>
  <data name="CategoryNameExists" xml:space="preserve">
    <value>This category name is already exists.</value>
  </data>
  <data name="CategoryNameField.PlaceholderText" xml:space="preserve">
    <value>Category name</value>
  </data>
  <data name="CompletedTaskToastTitle" xml:space="preserve">
    <value>You're complete the target!</value>
  </data>
  <data name="CompleteTaskDialog.PrimaryButtonText" xml:space="preserve">
    <value>Mark</value>
  </data>
  <data name="CompleteTaskDialog.SecondaryButtonText" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="CompleteTaskDialog.Title" xml:space="preserve">
    <value>Mark target as completed?</value>
  </data>
  <data name="CompleteTaskDialogCheckBox.Content" xml:space="preserve">
    <value>Create an expense event for a target</value>
  </data>
  <data name="CompleteTaskDialogInfo.Message" xml:space="preserve">
    <value>You can create an expense event that will be attributed to this target.</value>
  </data>
  <data name="CompleteTaskDialogInfo.Title" xml:space="preserve">
    <value>Note</value>
  </data>
  <data name="CreateTaskButton.Content" xml:space="preserve">
    <value>Create target</value>
  </data>
  <data name="EditButton.Content" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="EditTaskModal.PrimaryButtonText" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="EditTaskModal.SecondaryButtonText" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="EditTaskModal.Title" xml:space="preserve">
    <value>Edit target</value>
  </data>
  <data name="EventInvalidCategory" xml:space="preserve">
    <value>Category which you select doesn't exists.</value>
  </data>
  <data name="ExpensesBlockTitle.Text" xml:space="preserve">
    <value>Expenses for the</value>
  </data>
  <data name="FieldRequiredError" xml:space="preserve">
    <value>This field is required.</value>
  </data>
  <data name="InvalidCost" xml:space="preserve">
    <value>Cost is invalid.</value>
  </data>
  <data name="MainPageTitle.Text" xml:space="preserve">
    <value>Home</value>
  </data>
  <data name="MainTitle.Text" xml:space="preserve">
    <value>Home</value>
  </data>
  <data name="RemoveButton.Content" xml:space="preserve">
    <value>Remove</value>
  </data>
  <data name="RemoveDialogCancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="RemoveDialogDescription" xml:space="preserve">
    <value>This action cannot be undone.</value>
  </data>
  <data name="RemoveDialogSubmit" xml:space="preserve">
    <value>Remove</value>
  </data>
  <data name="RemoveTaskDialogTitle" xml:space="preserve">
    <value>Remove target?</value>
  </data>
  <data name="RootNavCategories.Content" xml:space="preserve">
    <value>Categories</value>
  </data>
  <data name="RootNavEventGroups.Content" xml:space="preserve">
    <value>Events</value>
  </data>
  <data name="RootNavMain.Content" xml:space="preserve">
    <value>Home</value>
  </data>
  <data name="RootNavStats.Content" xml:space="preserve">
    <value>Statistic</value>
  </data>
  <data name="SearchNotFound" xml:space="preserve">
    <value>No data</value>
  </data>
  <data name="SelectFileText.Text" xml:space="preserve">
    <value>Select file</value>
  </data>
  <data name="SettingsAuthors" xml:space="preserve">
    <value>Authors</value>
  </data>
  <data name="SettingsAuthorsDesc" xml:space="preserve">
    <value>Find out who contributed to the development of Budget Control</value>
  </data>
  <data name="SettingsDonations" xml:space="preserve">
    <value>Support us</value>
  </data>
  <data name="SettingsDonationsDesc" xml:space="preserve">
    <value>Support us financially</value>
  </data>
  <data name="SettingsPrivacyPolicy" xml:space="preserve">
    <value>Privacy policy</value>
  </data>
  <data name="SettingsPrivacyPolicyDesc" xml:space="preserve">
    <value>Read our privacy policy</value>
  </data>
  <data name="SettingsReleases" xml:space="preserve">
    <value>Releases</value>
  </data>
  <data name="SettingsReleasesDesc" xml:space="preserve">
    <value>Find out what's new in Budget Control</value>
  </data>
  <data name="SettingsSendReport" xml:space="preserve">
    <value>Send report</value>
  </data>
  <data name="SettingsSendReportDesc" xml:space="preserve">
    <value>Submit an issue report to provide developers with more information about it</value>
  </data>
  <data name="SettingsTitle.Text" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="SettingsVersionWord.Text" xml:space="preserve">
    <value>Version</value>
  </data>
  <data name="TaskCostField.PlaceholderText" xml:space="preserve">
    <value>Target cost</value>
  </data>
  <data name="TaskNameField.PlaceholderText" xml:space="preserve">
    <value>Target name</value>
  </data>
  <data name="TasksBlockTitle.Text" xml:space="preserve">
    <value>Your targets:</value>
  </data>
  <data name="TasksNotFound.Text" xml:space="preserve">
    <value>Now you don't have any target</value>
  </data>
  <data name="TaskWithEventCompleted" xml:space="preserve">
    <value>Congratulations, you're complete the target "{taskName}" and it cost you {cost} ₽. This event has already been created for today.</value>
  </data>
  <data name="TaskWithoutEventCompleted" xml:space="preserve">
    <value>Congratulations, you're complete the target "{taskName}" and select variant "Don't create event", therefore, nowhere will it be noted that you spent money on it.</value>
  </data>
</root>